Git - распределенная система для хранения коллективной истории изменений всех файлов в проекте.
Хранение наборов изменений позволит нам существенно сократить объем информации и тонко контролировать 
их применение.

Коммит - законченный набор изменений файла.
  - имя
  - дата и время
  - автор
  - пояснительное сообщение

Коммиты объединяюбтся в ветки. У ветки есть имя.
Начало работы:
  1)  git init
  2)  git log - список коммитов
  3)  git status - показывает текущую ветку и др. инфо
  4)  git config --global user.name "username"          - задаем имя для работы с git
      git config --global user.emal "your@mail.ru"      - и email
      
  5)  git add <file> - добавим файл в stage - список изменений, не зафиксированных коммитом 
  6)  git commit -m "commit message"
  7)  git status && git log
  8)  git show <commit_hash_from_log> - список изменений
  9)  git diff - набор изменений относительно текущего (последнего) коммита
  10) git checkout <commit_hash_from_log> - переход между коммитами
                   <branch_name> - переключение между ветками
  11) git remote - список удаленных репозиториев
  12) git remote add <reote_name (origin)> <remote_git_link>
  13) git push <remote_name> <branch_name> - публикация в удаленный репозиторий
  14) git pull <remote_name> <branch_name> - выгрузка свежей версии из удаленного репозитория
        --rebase - в случае разных состояний ветки в remote и локально, rebase преватит эти коммиты в одну историю.
        т.е. локально есть коммиты, которых нет в remote,
        и в remote есть коммиты, которых нет локально.
        rebase превратит в единую историю
        вы больше не выполняете слияние — вы фактически совершаете коммит поверх удаленной (remote) ветки 
        этот флаг стоит использовать, когда ваши изменения не заслуживают отдельной ветки 
  15) git clone <remote_git_link> - копирование содержимого проекта на локальный компьютер
  16) git branch - покажет список локальных веток и ветку, в которой мы находимся
        -a покажет список всех веток и ветку, в которой мы находимся
  17) git branch <name> - создание новой ветки на основе текущей
  18) git merge <branch_to_merge_from> -m "merge message" - сливаем ветку из параметра в текущую ветку (например, в master)
      Merge - сохраняет ветвление, но создает еще один дополнительный новый коммит в "текущей" (master) ветке, содержащий
      слитые изменения двух веток в одну (master).
      После Merge указатель HEAD будет на "текущей" (master) ветке, т.е. на той, в которую слили
  19) git rebase <branch_to_merge_from> -m "rebase message" -  
      Rebase - делает структуру плоской, не создает дополнительный коммит (в master). После Rebase указатель HEAD будет
      на "текущей" (master) ветке, т.е. на той, в которую слили. Сливаемая ветка из параметра "вольется" в текущую ветку 
      (master) как промежуточный коммит. Таким, образом, получим линейную структуру (цепочку коммитов)
  20) git cherry-pick <commit_hash_1> <commit_hash_2>... - позволяет взять коммиты из различных веток, наследуемых от 
      одной (например, от master) и слить (merge) их в единую ветку (master) - от которой наследовались ветки, из которых были
      взяты коммиты.
  21) git revert <commit_hash> - создание нового коммита, содержащего предыдущие изменения (отмена закоммиченных изменений)



Разрешение конфликтов в git
  Стратегии:
    1) прими "их" изменения, "мои" выкинь
    2) прими "мои" изменения, "их" выхинь
    3) прими часть "моих", часть "их" изменений - проработать вручную.


.gitignore - файл, в котором хранятся список файлов, которые не должны быть загружены в удаленный репозиторий

"detached HEAD" - состояние неопределенности, при котором мы не можем создать коммит, т.к. не знаем, к чему его 
можно присоединить.

Для работы с git в VSCode необходимо добавить терминал bash:
1 F1->Open User Settings->Терминал->Изменить параметры в settings.json и добавить строчку
"terminal.integrated.shell.windows": "E:\\Programs\\Git\\bin\\bash.exe"
Перезагрузить и появится терминал bash. Но при установке git на Windows можно выбрать опцию,
при которой bash будет встроен в cmd/PowerShell. Поэтому работать с Golang и git можно в одном
терминале PowerShell


Загрузка проекта на github:
1 В терминале выбираем директорию проекта (cd D:\project)
2 Инициализация/создание репозитория
  git init
3 git status
4 Добавим все файлы проекта в нам будущий commit (git add <file.txt> - помечает файл как измененный)
  git add .
  либо git add <имя_файла>
5 Теперь создаем commit. Обязательно указываем комментарий.
  git commit -m "<комментарий>"
6 Push существующего репозитория на GitHub - Создание нового подключения к удаленному репозиторию под меткой origin
  git remote add origin https://github.com/vitalg93/mysite.git 
7 GitHub рекомендует переименовать локальную главную ветку на main чтобы соответствовать GitHub и не вызывать конфликты
  git branch -M main
8 В этом примере состояние локальной ветки ＜branch-name＞ передается в удаленный репозиторий, обозначенный как ＜remote-name＞ 
  git push <remote-name> <branch-name>
  Выполнив команду git push -u origin main вы устанавливаете связь между той веткой,
  в которой вы находитесь и веткой main на удалённом сервере. Команду требуется выполнить 
  единожды, чтобы потом можно было отправлять/принимать изменения лишь выполняя git push
  из ветки без указания всяких алиасов для сервера и удалённых веток. 
  git push -u origin main
8.1 Если п.8 не сработает -  ! [rejected]        main -> main (non-fast-forward) 
    error: failed to push some refs to 'https://github.com/vitalg93/my_site.git'
    то см. п.9
9 git push origin +HEAD


Для существующего проекта загрузка на ПК 
git clone https://github.com/libgit2/libgit2


После установки производим настройку своего профиля вводя в терминал поочереди команды: 

git config --global user.name "ВАШЕ_ИМЯ"
git config --global user.email "email@mail.ru"

После указания своих данных, можно их просмотреть:
git config --global --list

Далее убедитесь, что ваш репозиторий установлен, запустив
git remote -v

Иначе подключите с помощью
git remote add origin ssh://git@example.com:1234/myRepo.git

Копировать или клонировать репу c GitHub можно по HTTPS или SSH.
git clone ССЫЛКА_НА_РЕПОЗИТОРИЙ

После клонирования переходим в папку репозитория:
cd НАЗВАНИЕ_РЕПОЗИТОРИЯ 

Смотрим статус
git status

Добавляем файл в репозиторий:
git add example.txt

Коммитим:
git commit -m "This first example text file"

Пушим
git push origin master

Отправить данные в репу можно используя команду git push:
git push origin master

To set main as the default branch name do:
git config --global init.defaultBranch main

Просмотреть изменения относительно двух веток можно командой:
git diff <исходная_ветка> <целевая_ветка>

Удалить ненужную ветку:
git branch -d <название_ветки>

Список веток:
git branch -r

Просмотр историю ветки:
git log

Подсказки по популярным командам:
git help

# Или по конкретной команде
git help <название_команды>

# Например clone
git help clone

# Удаление из отслеживания 
git rm --cached <file>

# origin адрес репозитория:
git remote -v



// Как работать в ветке (локально) определенной ветки с сервера?
Для того, чтобы сделать ещё одну отслеживаемую ветку - переключитесь на удалённую 
и выполните создание локальной ветки. Всё это можно сделать одной командой:

git checkout --track -b local_branch_name origin/remote_branch_name

Где local_branch_name - имя создаваемой ветки, origin/remote_branch_name - полное имя удалённой ветки;
local_branch_name для удобства можно назвать одинаково с remote_branch_name.
После выполнения команды у вас появится ветка local_branch_name, которая будет отслеживать ветку remote_branch_name на сервере.






ответвиться от отслеживаемой ветки (пусть отслеживаемая - feature/mongo)
git checkout -b feature/mongo-gudza

запушить после ответвления локальную ветку (появится новая ветка на гитлабе)

Переименовать ветку (git branch -m feature/oldname):
git branch -m feature/postgres

за время работы в ветке, от которой ответвились, произошли изменения, и их нужно слить
    -для этого смотрим список локальных веток
      git branch

        * feature/mongo-gudza
          main
    -загрузим информацию о ветке, с которой будем сливаться:
      git fetch origin feature/mongo
    - переходим в сливаемую ветку. -m флаг означает, что будем merge
      git checkout -m feature/mongo      // после чего в Gitlab появится запись в ветке (feature/mongo)

          // "Merge remote-tracking branch 'origin/swagger-gudza' into feature/mongo" - т.е. смерджили. 

      //? git checkout -m feature/mongo-gudza

      Switched to branch 'feature/mongo-gudza'
      Your branch and 'origin/feature/mongo' have diverged,
      and have 1 and 1 different commits each, respectively.
        (use "git pull" to merge the remote branch into yours)

      git pull
      git merge feature/mongo
        Already up to date. 


для того, чтобы смерджить в ветку (develop) - необходимо переключиться на нее и подтянуть обновления
git checkout --track -b develop origin/develop
git pull

сливаем ветку feature/mongo-gudza в develop (находясь в *develop)
git merge feature/mongo-gudza

не забудь запушить после мерджа






Если на github добавил вручную readme.md, а проект собрал в VSCode и подключил к удаленном репозиторию,
то для заливки на github нужно решить конфликт версий (если git push -u origin main не работает)
# — забирает изменения удаленной ветки из репозитория по умолчания, основной ветки; 
#той, которая была использована при клонировании репозитория.
git fetch
git rebase origin/master

или 
git pull --rebase


Это так, поскольку
https://stackoverflow.com/questions/7200614/how-to-merge-remote-master-to-local-branch
    git merge branchname - takes new commits from the branch branchname, and adds them to the current branch. If necessary, it automatically adds a "Merge" commit on top.

    git rebase branchname - takes new commits from the branch branchname, and inserts them "under" your changes. More precisely, it modifies the history of the current branch such that it is based on the tip of branchname, with any changes you made on top of that.

    git pull is basically the same as git fetch; git merge origin/master.

    git pull --rebase is basically the same as git fetch; git rebase origin/master.




// Как удалить любую папку, в т.ч. и .idea, и лишние файлы из Git
      Создаем файл .gitignore в корне репозитария с содержимым:

      .idea
      logs/

      ------------------------------------------------------------------
      Подробнее можно ознакомиться на странице: https://git-scm.com/book/ru/v1/Основы-Git-Запись-изменений-в-репозиторий
      Удаляем ненужные папки и файлы при синхронизации в Git репозиторий

      Удалим все проиндексированные файлы:

      git rm -r -f --cached .

      Запустим индексацию заново:

      git add .

      Добавляем коммит и пушим:

      git commit -m "Remove files"
      git push -u origin master


      -----------------------------------------------------------------------------------
      # Игнор-лист файлов проекта
      # Игнорировать ВСЕ файлы и директории, включая поддиректории и файлы в них
      *
      # ---- ФАЙЛЫ ----
      # Игнорирование по типу файла, будут игнорироваться в АБСОЛЮТНО всех директориях
      # Например /files/data.zip, /server.log, /uploads/users/data/info.xls
      *.zip
      *.log
      *.pdf
      *.xls
      # Игнорирование файла во ВСЕХ директориях
      # Например /params/db/config.php, /config.php
      config.php
      # Игнорирование конкретного файла ТОЛЬКО в корне проекта
      # (корнём считается расположение файла .gitignore)
      # Например НЕ БУДЕТ проигнорирован файл /db/config.php
      /config.php
      # Игнорирование конкретного файла ТОЛЬКО в указанной директории
      # Например НЕ БУДЕТ проигнорирован файл /prod/params/config.php
      /params/config.php
      # ---- ДИРЕКТОРИИ ----
      # Игнорирование всех файлов и папок ТОЛЬКО в конкретной директории(включая поддиректории и файлы в них)
      # Например /images/user.jpg, /images/company/logo.png
      # НЕ БУДУТ проигнорированы файлы и папки /prod/images/user.jpg
      /images/*
      # Игнорирование всех файлов и папок в ЛЮБЫХ директориях с указанным именем
      # Например /images/user.jpg, /core/images/user.jpg
      images/*
      # Игнорирование ВСЕХ html-файлов в ОДНОЙ КОНКРЕТНОЙ директории(НЕ ВКЛЮЧАЯ поддиректории)
      # Например /private/index.html
      # НЕ БУДУТ проигнорированы файлы в /private/ivan/index.html
      /private/*.html
      # Игнорирование ВСЕХ html-файлов в КОНКРЕТНОЙ директории ВКЛЮЧАЯ поддиректории
      # Например /private/info.html, /private/users/ivan/info.html
      /private/**/*.html
      # ---- РАЗНОЕ ----
      # Исключение из игнорирования
      # Игнорирование ВСЕХ файлов и папок внутри директории /secret,
      # за исключением файла /secret/free.txt, он не будет проигнорирован
      /secret/*
      !/secret/free.txt
      # Игнорирование файла с именем, содержащим спецсимволы
      # Например !readme!.txt
      \!readme!.txt
      # Игнорирование всех JPG и JPEG файлов внутри директорий,
      # которые начинаются на "h" и МОГУТ содержать ещё один символ после
      # Например /images/h4/user.jpg, /images/h/company.jpeg
      /images/h?/*.jp?g



Troubleshooting:  
  Конфигурация модуля Go для непубличных модулей
  "410 Gone server response: not found: " - при попытке сделать go get к приватному репозиторию
  Решение:
      git config --global url."git@git.company.ru:".insteadOf "https://git.company.ru/"
      go env -w GOPRIVATE=git.company.ru/*
      go get git.wildberries.ru/oer/remote-static@lib

  
    Переменная среды GOPRIVATE определяет, какие модули команда go считает закрытыми (недоступными публично) и 
    поэтому не должна использовать базу данных прокси или контрольной суммы. Переменная представляет собой разделенный
    запятыми список шаблонов глобуса (в синтаксисе пути Go.Match) префиксов пути модуля. Например,

     GOPRIVATE=*.corp.example.com,rsc.io/private

    заставляет команду go рассматривать как закрытый любой модуль с префиксом пути, совпадающим с любым шаблоном,
    включая git.corp.example.com/xyzzy, rsc.io/private и rsc.io/private/quux.

    Команда 'go env -w' (см. 'Go help env') может использоваться для установки этих переменных для будущих вызовов команды go.
    
    Примечание по использованию ssh
    Если вы используете ssh для доступа к git repo (локально размещенный), вы можете добавить следующее в ваш ~/.gitconfig:
      [url "ssh://git@git.local.intranet/"]
            insteadOf = https://git.local.intranet/

    чтобы goкоманды могли получить доступ к git-серверу.