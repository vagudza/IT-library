// HTML modules guide:
<!-- 
    {{ if gt .Var 10 }}      |    if Obj.Var>10
    ...
    {{ else }}
    ...
    {{ end }}

    lt <
    gt >
    ne !=
    eq =


    {{ range .Hobbies }}
    <p><b>{{ . }}</b><p>
    {{ end }}
-->

Компиляция:

https://metanit.com/go/tutorial/5.1.php
Данный файл также принадлежит пакету main. Файлов может и быть и больше. 
Теперь скомпилируем из этих файлов программу. Для этого перейдем в консоли к папке проекта и выполним команду:
go build -o main.exe factorial.go main.go
Флаг -o указывает, как будет называться выходной файл - в данном случае main.exe. 
Затем идут все компилируемые файлы. После выполнения этой команды будет создан файл main.exe

Теперь рассмотрим другую ситуацию, когда файлы нашей программы разделены по разным пакетам.
Определим в папке проекта каталог computation. 
Затем в каталог computation добавим следующий файл factorial.go:
	
package computation
 
func Factorial(n int) int {
     
    var result = 1
    for i:=1; i <= n; i++{
        result *= i
    }
    return result
}

Код файла factorial.go принадлежит пакету computation. 
Важно отметить, что название функции начинается с заглавной буквы. 
Благодаря этому данная функция будет видна в других пакетах.


Импорт пакетов в Go
И чтобы использовать функцию factorial, надо импортировать этот пакет в файле main.go:
package main
import (
    "fmt"
    "./computation"
)
 
func main() {
     
    fmt.Println(computation.Factorial(4))
    fmt.Println(computation.Factorial(5))
}

Компиляция и выполнение программы осуществляется также как и ранее без необходимости указания всех файлов из других пакетов:
>go run main.go








// DATABASE
// example of row adding
result, err := db.Exec("insert into productdb.Products (model, company, price) values (?, ?, ?)", 
        "iPhone X", "Apple", 72000)
if err != nil{
    panic(err)
}
fmt.Println(result.LastInsertId())  // id добавленного объекта
fmt.Println(result.RowsAffected())  // количество затронутых строк








// GO TUTORIAL 
func split(sum int) (x, y int) {
	x = sum * 4 / 9
	y = sum - x
    
    // возврат без указания переменных - вернуться переменные x, y - "nacked return"
	return
}


func swap(x, y string) (string, string) {
    // Функция может возвращать любое количество результатов.
	return y, x
}


// Если инициализатор присутствует, тип можно не указывать;  переменная примет тип инициализатора
var c, python, java = true, false, "no!"


// Внутри функции оператор: = short можно использовать вместо объявления var с неявным типом.
func main() {
	var i, j int = 1, 2
	k := 3
	c, python, java := true, false, "no!"

	fmt.Println(i, j, k, c, python, java)
}


var i int = 42
эквивалентно
i := 42
f := float64(i)

// константа
const Truth = true

// циклы
sum := 0
for i := 0; i < 10; i++ {
    sum += i
}
fmt.Println(sum)    // 1024

// Операторы init и post необязательны
// код выше эквивалентен:

for ; sum < 1000; {
    sum += sum
}
fmt.Println(sum)    // 1024

// Цикл while определяется через for:
sum := 1
for sum < 1000 {
    sum += sum
}
fmt.Println(sum)    // 1024


// бесконечный цикл
for {
	}


Как и for, оператор if может начинаться с короткого оператора, который выполняется перед условием.
Переменные, объявленные оператором, находятся в области видимости только до конца if.
func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		return v
	}
	return lim
}

// оператор switch. Выражение os := "test"; вычисляется внутри switch
switch os := "test"; os {
	case "test":
		fmt.Println("1")
	case "linux":
		fmt.Println("Linux.")
	default:
		fmt.Printf("default")
}

// switch без условия - это то же самое, что и переключатель true
t := time.Now()
switch {
    case t.Hour() < 12:
        fmt.Println("Good morning!")
    case t.Hour() < 17:
        fmt.Println("Good afternoon.")
    default:
        fmt.Println("Good evening.")
}

// Оператор defer откладывает выполнение функции до возврата из окружающей функции.
func main() {
	defer fmt.Println("world")

	fmt.Println("hello")
}

// указатели: Указатель содержит адрес памяти значения. Тип * T - это указатель на значение T.
var p *int
// Оператор & генерирует указатель на свой операнд.
i := 42
p = &i
fmt.Println(*p)     // 42 а само значение p может быть, например, 0xc000018030
*p = 21             // set i through the pointer - *p привязано по адресу к i,
fmt.Println(i)      // see the new value of i - соответственно, i равно 21


// структуры 
type Vertex struct {
	X int
	Y int
}

// объявление экземпляра стурктуры Vertex{1, 2}
func main() {
	fmt.Println(Vertex{1, 2})


    v := Vertex{1, 2}
	p := &v             // p - указатель на экземпляр структуры
	p.X = 19            // что эквивалентно (*p).X = 19
	fmt.Println(v)      // {19 2}
}


// определяем структруры
var (
	v1 = Vertex{1, 2}  // has type Vertex   // {1 2}
	v2 = Vertex{X: 1}  // Y:0 is implicit   // {1 0} - X - определили, Y - нет
	v3 = Vertex{}      // X:0 and Y:0       // создание "экземпляра" структуры, но с дефолтными значениями полей
	p  = &Vertex{1, 2} // has type *Vertex  // &{1 2} - тип *Vertex
)

func main() {
	fmt.Println(v1, p, v2, v3)          // {1 2} &{1 2} {1 0} {0 0}
}


// массив из 2 строк
var a [2]string
a[0] = "Hello"
a[1] = "World"

// создаем массив из 6 целых и определяем их
primes := [6]int{2, 3, 5, 7, 11, 13}
fmt.Println(primes)
// слайсы: подмножество массива
var s []int = primes[1:4]           // [3 5 7]

// !!! Срез не хранит никаких данных, он просто описывает раздел базового массива.
// Изменение элементов среза изменяет соответствующие элементы его базового массива.
// Другие срезы, которые используют тот же базовый массив, увидят эти изменения.
s[0] = 1234
fmt.Println(primes)             // 2, 1234, 5, 7, 11, 13

// эквивалентные срезы:
var a [10]int

a[0:10]
a[:10]
a[0:]
a[:]

a = a[:4]       // len 4, cap 10 - срез 

len(a)      // 10  Длина среза - это количество содержащихся в нем элементов. 
cap(a)      // 10 Емкость среза - это количество элементов в базовом массиве, считая от первого элемента в срезе.

!! Нулевое значение среза равно nil
var s []int
fmt.Println(s, len(s), cap(s))      // [] 0 0 
if s == nil {
    fmt.Println("nil!")             // напечатает nil
}


// Функция make выделяет обнуленный массив и возвращает фрагмент, который ссылается на этот массив.
