Что происходит, когда я вбиваю в адресную строку моего браузера medium.com? 
Как запрос доходит до сервера, и как идет обратно? Гранулярность — настолько маленькая, насколько возможно.
...



Как можно отсортировать файл на 100GB, в котором расположены числа в случайном порядке, по 1 числу на строку? 
Ограничения — объем ОЗУ на машине составляет 1GB.
...



HTTP-обработчики
    Обработчиком называется то, что принимает запрос и возвращает ответ. То есть обработчики формируют ответы на запросы.
    В Go обработчики реализуют интерфейс со следующей сигнатурой:
        type Handler interface {
                ServeHTTP(ResponseWriter, *Request)
        }

    
    Для выбора обработчика запроса в Go используется HTTP-мультиплексор. В некоторых библиотеках он называется «muxer» или 
    «router», но суть та же. Мультиплексор выбирает обработчик на основе анализа пути запроса.

    Servemux (маршрутизатор HTTP запросов) в Go поддерживает два разных типа URL-шаблонов: 
        -фиксированные пути ("/snippet")
        -многоуровневые пути ("/", "/static/") 
        
        Фиксированные пути не заканчиваются косой чертой, тогда как многоуровневые пути заканчиваются косой чертой.
        Шаблон "/" действует по сценарию «catch-all» (ловим все запросы). По сути, данный шаблон означает совпадение с одним
        слэшем, за которым следует что-нибудь (или вообще ничего).


Best Practices in GO
    1 Установка таймаутов https://blog.cloudflare.com/exposing-go-on-the-internet/ 
        srv := &http.Server{
            ReadTimeout:  5 * time.Second,      // всегда устанавливайте таймауты
            WriteTimeout: 10 * time.Second,     // всегда устанавливайте таймауты
            IdleTimeout:  120 * time.Second,    // всегда устанавливайте таймауты
            TLSConfig:    tlsConfig,
            Handler:      serveMux,
        }
        log.Println(srv.ListenAndServeTLS("", ""))